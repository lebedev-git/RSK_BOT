from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram import flags, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import db
from database.models import User, Attendance
from datetime import datetime
import pytz
from sqlalchemy import text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from calendar import monthrange
from datetime import timedelta
from config import load_config
from aiogram.exceptions import TelegramBadRequest
from services.ai_service import get_ai_response

async def generate_presence_table(date: datetime.date) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        async with db.session_maker() as session:
            today_start = datetime.combine(date, datetime.min.time())
            today_end = datetime.combine(date, datetime.max.time())
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            query = text("""
                WITH LastStatus AS (
                    SELECT user_id, status,
                           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY date DESC) as rn
                    FROM attendance
                    WHERE date BETWEEN :start AND :end
                )
                SELECT u.full_name, ls.status
                FROM users u
                LEFT JOIN LastStatus ls ON u.id = ls.user_id AND ls.rn = 1
                ORDER BY u.full_name
            """)
            
            result = await session.execute(query, {
                'start': today_start,
                'end': today_end
            })
            
            rows = result.fetchall()
            present_users = []
            absent_users = []
            excused_users = []
            
            for row in rows:
                name = row[0]
                status = row[1]
                
                if status == 'present':
                    present_users.append(name)
                elif status == 'excused':
                    excused_users.append(name)
                else:
                    absent_users.append(name)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            table = "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ:\n\n"
            
            table += "‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç:\n"
            if present_users:
                for user in present_users:
                    table += f"- {user}\n"
            else:
                table += "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è –∫–∞–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π\n"
            
            table += "\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:\n"
            if absent_users:
                for user in absent_users:
                    table += f"- {user}\n"
            else:
                table += "–í—Å–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
            
            if excused_users:
                table += "\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ:\n"
                for user in excused_users:
                    table += f"- {user}\n"
            
            return table
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"

@flags.chat_action("typing")
async def send_report(bot: Bot, group_chat_id: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"""
    try:
        today = datetime.now(pytz.timezone('Europe/Moscow')).date()
        report = await generate_presence_table(today)
        
        message_text = f"–û—Ç—á–µ—Ç –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–∞ {today}:\n\n{report}"
        
        await bot.send_message(
            group_chat_id,
            message_text,
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑–º–µ—Ç–∫–∏
        )
        print("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
async def cmd_report(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏"""
    try:
        today = datetime.now(pytz.timezone('Europe/Moscow')).date()
        report = await generate_presence_table(today)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        base_message = f"–û—Ç—á–µ—Ç –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–∞ {today}:\n\n{report}"
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        escaped_message = base_message
        for char in ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']:
            escaped_message = escaped_message.replace(char, f'\\{char}')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏
        await message.answer(escaped_message)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã report: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

class AdminStates(StatesGroup):
    choosing_action = State()
    marking_attendance = State()
    choosing_month = State()

async def cmd_admin(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    try:
        async with db.session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            query = text("SELECT is_admin FROM users WHERE telegram_id = :telegram_id")
            result = await session.execute(query, {"telegram_id": message.from_user.id})
            user = result.first()
            
            if not user or not user[0]:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å–æ –≤—Å–µ–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üìù –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ", callback_data="admin:attendance")
            keyboard.button(text="üìä –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin:stats")
            keyboard.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin:manage_admins")
            keyboard.adjust(1)
            
            await message.answer(
                "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard.as_markup()
            )
            await state.set_state(AdminStates.choosing_action)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ cmd_admin: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def process_admin_callback(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    
    if action == "back":
        async with db.session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ—Ç–º–µ—á–µ–Ω—ã
            today = datetime.now(pytz.timezone('Europe/Moscow'))
            check_query = text("""
                WITH UserCount AS (
                    SELECT COUNT(*) as total FROM users
                ),
                MarkedCount AS (
                    SELECT COUNT(DISTINCT user_id) as marked 
                    FROM attendance 
                    WHERE DATE(date) = DATE(:today)
                )
                SELECT u.total, COALESCE(m.marked, 0) as marked
                FROM UserCount u
                LEFT JOIN MarkedCount m ON 1=1
            """)
            result = await session.execute(check_query, {"today": today})
            total, marked = result.first()
            
            if total > marked and await state.get_state() == AdminStates.marking_attendance:
                await callback.answer(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({marked} –∏–∑ {total})", 
                    show_alert=True
                )
                return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ", callback_data="admin:attendance")
        keyboard.button(text="üìä –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin:stats")
        keyboard.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin:manage_admins")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(AdminStates.choosing_action)
        
    elif action == "attendance":
        await update_attendance_list(callback)

    elif action == "manage_admins":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç—É—Å–æ–º
        keyboard = InlineKeyboardBuilder()
        
        async with db.session_maker() as session:
            query = text("""
                SELECT id, full_name, is_admin 
                FROM users 
                ORDER BY full_name
            """)
            result = await session.execute(query)
            users = result.fetchall()
            
            for user in users:
                admin_status = "‚úÖ" if user[2] else "‚ùå"
                keyboard.button(
                    text=f"{admin_status} {user[1]}", 
                    callback_data=f"toggle_admin:{user[0]}:{not user[2]}"
                )
            
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")
            keyboard.adjust(1)
        
        await callback.message.edit_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∞:",
            reply_markup=keyboard.as_markup()
        )

    elif action == "stats":
        keyboard = InlineKeyboardBuilder()
        current_date = datetime.now()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
        for i in range(3):
            date = current_date - timedelta(days=30*i)
            month_name = date.strftime("%B %Y")
            keyboard.button(
                text=month_name,
                callback_data=f"stats_month:{date.strftime('%Y-%m')}"
            )
        
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard.as_markup()
        )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def process_stats_callback(callback: CallbackQuery, state: FSMContext):
    try:
        _, date_str = callback.data.split(":")
        year, month = map(int, date_str.split("-"))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await generate_monthly_stats(year, month)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:stats")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            stats,
            reply_markup=keyboard.as_markup()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# –ò –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞:
async def process_stats_month_callback(callback: CallbackQuery, state: FSMContext):
    try:
        _, date_str = callback.data.split(":")
        year, month = map(int, date_str.split("-"))
        
        stats = await generate_monthly_stats(year, month)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:stats")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            stats,
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# –û–±–Ω–æ–≤–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_admin_handlers(dp: Dispatcher):
    dp.message.register(cmd_admin, Command("admin"))
    dp.callback_query.register(process_admin_callback, lambda c: c.data.startswith("admin:"))
    dp.callback_query.register(process_stats_month_callback, lambda c: c.data.startswith("stats_month:"))
    dp.callback_query.register(process_status_callback, lambda c: c.data.startswith("status:"))
    dp.callback_query.register(process_toggle_admin, lambda c: c.data.startswith("toggle_admin:"))

async def generate_monthly_stats(year: int, month: int) -> str:
    try:
        async with db.session_maker() as session:
            start_date = datetime(year, month, 1)
            _, last_day = monthrange(year, month)
            end_date = datetime(year, month, last_day, 23, 59, 59)
            
            query = text("""
                SELECT 
                    u.full_name,
                    COUNT(CASE WHEN a.status = 'present' THEN 1 END) as present_count,
                    COUNT(CASE WHEN a.status = 'absent' THEN 1 END) as absent_count,
                    COUNT(CASE WHEN a.status = 'excused' THEN 1 END) as excused_count
                FROM users u
                LEFT JOIN attendance a ON u.id = a.user_id 
                AND a.date BETWEEN :start AND :end
                GROUP BY u.id, u.full_name
                ORDER BY u.full_name
            """)
            
            result = await session.execute(query, {
                'start': start_date,
                'end': end_date
            })
            
            stats = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {start_date.strftime('%B %Y')}:\n\n"
            
            for row in result:
                stats += f"üë§ {row[0]}:\n"
                stats += f"   ‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–π: {row[1]}\n"
                stats += f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–π: {row[2]}\n"
                stats += f"   ‚ö†Ô∏è –£–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω: {row[3]}\n\n"
            
            return stats
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

async def update_attendance_list(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardBuilder()
    
    async with db.session_maker() as session:
        query = text("""
            SELECT u.id, u.full_name, 
                (SELECT a.status 
                 FROM attendance a 
                 WHERE a.user_id = u.id 
                 AND DATE(a.date) = DATE(:today)
                 ORDER BY a.date DESC 
                 LIMIT 1) as status
            FROM users u
            ORDER BY u.full_name
        """)
        result = await session.execute(query, {
            'today': datetime.now(pytz.timezone('Europe/Moscow'))
        })
        users = result.fetchall()
        
        buttons = []
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∫–Ω–æ–ø–æ–∫
        for user in users:
            user_id, name = user[0], user[1]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            buttons.append([{
                "text": f"üë§ {name}",
                "callback_data": f"header:{user_id}"
            }])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞
            buttons.append([
                {"text": "‚úÖ", "callback_data": f"status:{user_id}:present"},
                {"text": "‚ùå", "callback_data": f"status:{user_id}:absent"},
                {"text": "‚ö†Ô∏è", "callback_data": f"status:{user_id}:excused"}
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([{
            "text": "üîô –ù–∞–∑–∞–¥",
            "callback_data": "admin:back"
        }])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        "–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
        reply_markup=keyboard
    )

async def process_status_callback(callback: CallbackQuery, state: FSMContext):
    try:
        _, user_id, status = callback.data.split(":")
        
        async with db.session_maker() as session:
            if not await check_admin_rights(session, callback.from_user.id):
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            today = datetime.now(pytz.timezone('Europe/Moscow'))
            
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–º–µ—Ç–∫—É
            delete_query = text("""
                DELETE FROM attendance 
                WHERE user_id = :user_id 
                AND DATE(date) = DATE(:today)
            """)
            await session.execute(delete_query, {
                "user_id": user_id,
                "today": today
            })
            
            attendance = Attendance(
                user_id=int(user_id),
                date=today,
                status=status
            )
            session.add(attendance)
            await session.commit()
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            check_query = text("""
                WITH UserCount AS (
                    SELECT COUNT(*) as total FROM users
                ),
                MarkedUsers AS (
                    SELECT DISTINCT user_id 
                    FROM attendance 
                    WHERE DATE(date) = DATE(:today)
                )
                SELECT 
                    (SELECT total FROM UserCount) as total,
                    (SELECT COUNT(*) FROM MarkedUsers) as marked
            """)
            result = await session.execute(check_query, {"today": today})
            total, marked = result.first()
            
            # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            status_query = text("""
                SELECT u.id, u.full_name, 
                    (SELECT status 
                     FROM attendance a 
                     WHERE a.user_id = u.id 
                     AND DATE(a.date) = DATE(:today)
                     ORDER BY a.date DESC
                     LIMIT 1) as status
                FROM users u
                ORDER BY u.full_name
            """)
            users = await session.execute(status_query, {"today": today})
            users = users.fetchall()
            
            # 4. –ï—Å–ª–∏ –≤—Å–µ –æ—Ç–º–µ—á–µ–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
            if total == marked:
                config = load_config()
                await send_report(callback.bot, config.GROUP_CHAT_ID)
                
                admin_keyboard = InlineKeyboardBuilder()
                admin_keyboard.button(text="üìù –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ", callback_data="admin:attendance")
                admin_keyboard.button(text="üìä –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin:stats")
                admin_keyboard.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="admin:manage_admins")
                admin_keyboard.adjust(1)
                
                await callback.message.edit_text(
                    "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=admin_keyboard.as_markup()
                )
                await state.set_state(AdminStates.choosing_action)
            else:
                # 5. –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                buttons = []
                for user in users:
                    user_id, name, current_status = user
                    status_icon = "‚úÖ" if current_status == "present" else "‚ùå" if current_status == "absent" else "‚ö†Ô∏è" if current_status == "excused" else "‚ùî"
                    
                    buttons.append([{
                        "text": f"{status_icon} {name}",
                        "callback_data": f"header:{user_id}"
                    }])
                    buttons.append([
                        {"text": "‚úÖ", "callback_data": f"status:{user_id}:present"},
                        {"text": "‚ùå", "callback_data": f"status:{user_id}:absent"},
                        {"text": "‚ö†Ô∏è", "callback_data": f"status:{user_id}:excused"}
                    ])
                
                buttons.append([{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "admin:back"}])
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                
                try:
                    await callback.message.edit_text(
                        f"–û—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: (–æ—Ç–º–µ—á–µ–Ω–æ {marked} –∏–∑ {total})",
                        reply_markup=keyboard
                    )
                except TelegramBadRequest as e:
                    if "message is not modified" not in str(e):
                        raise
            
            await callback.answer()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def process_toggle_admin(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    try:
        _, user_id, new_status = callback.data.split(":")
        new_status = new_status.lower() == 'true'
        
        async with db.session_maker() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_query = text("SELECT is_admin FROM users WHERE telegram_id = :telegram_id")
            result = await session.execute(admin_query, {"telegram_id": callback.from_user.id})
            admin = result.first()
            
            if not admin or not admin[0]:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∞
            name_query = text("SELECT full_name FROM users WHERE id = :user_id")
            result = await session.execute(name_query, {"user_id": user_id})
            user = result.first()
            
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            update_query = text("""
                UPDATE users 
                SET is_admin = :is_admin 
                WHERE id = :user_id
            """)
            await session.execute(update_query, {
                "is_admin": new_status,
                "user_id": user_id
            })
            await session.commit()
            
            status_text = "–Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" if new_status else "—Å–Ω—è—Ç —Å –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            await callback.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} {status_text}",
                show_alert=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await process_admin_callback(callback, state)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            show_alert=True
        )

async def check_admin_rights(session, telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = text("SELECT is_admin FROM users WHERE telegram_id = :telegram_id")
    result = await session.execute(query, {"telegram_id": telegram_id})
    user = result.first()
    return bool(user and user[0])

async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await message.bot.send_chat_action(message.chat.id, "typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await get_ai_response(message.text)
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if "–ò–∑–≤–∏–Ω–∏—Ç–µ, " in response:
            response += "\n\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(response)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

def register_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_admin, Command("admin"))
    dp.message.register(cmd_report, Command("report"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –í–∞–∂–Ω–æ: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(handle_message, F.text & ~F.command)

def register_admin_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback
    dp.callback_query.register(process_admin_callback, lambda c: c.data.startswith("admin:"))
    dp.callback_query.register(process_stats_month_callback, lambda c: c.data.startswith("stats_month:"))
    dp.callback_query.register(process_status_callback, lambda c: c.data.startswith("status:"))
    dp.callback_query.register(process_toggle_admin, lambda c: c.data.startswith("toggle_admin:"))